import gzip
import os
import tempfile

import pytest

from torchprime.metrics.step_duration import (
  analyze_step_duration,
  analyze_step_duration_from_pb,
)
from torchprime.metrics.xplane_pb2 import XSpace  # type: ignore


def test_empty():
  with tempfile.NamedTemporaryFile(delete=True) as temp:
    xspace = XSpace()
    temp.write(xspace.SerializeToString())
    temp.flush()
    with pytest.raises(ValueError):
      analyze_step_duration(temp.name)


def test_two_events():
  with tempfile.NamedTemporaryFile(delete=True) as temp:
    xspace = XSpace()
    plane = xspace.planes.add()
    plane.name = "/device:TPU:0"
    plane.event_metadata[0].name = "SyncTensorsGraph.1"
    line = plane.lines.add()
    line.name = "XLA Modules"
    event = line.events.add()
    event.metadata_id = 0
    event.offset_ps = int(1e12)
    event.duration_ps = int(1e12)
    event = line.events.add()
    event.metadata_id = 0
    event.offset_ps = int(2e12)
    event.duration_ps = int(2e12)
    temp.write(xspace.SerializeToString())
    temp.flush()
    assert analyze_step_duration(temp.name) == 1.0


def test_three_events():
  with tempfile.NamedTemporaryFile(delete=True) as temp:
    xspace = XSpace()
    plane = xspace.planes.add()
    plane.name = "/device:TPU:0"
    plane.event_metadata[0].name = "SyncTensorsGraph.1"
    line = plane.lines.add()
    line.name = "XLA Modules"
    event = line.events.add()
    event.metadata_id = 0
    event.offset_ps = int(1e12)
    event.duration_ps = int(1e12)
    event = line.events.add()
    event.metadata_id = 0
    event.offset_ps = int(2e12)
    event.duration_ps = int(2e12)
    event = line.events.add()
    event.metadata_id = 0
    event.offset_ps = int(4e12)
    event.duration_ps = int(1e12)
    temp.write(xspace.SerializeToString())
    temp.flush()
    assert analyze_step_duration(temp.name) == 1.5


def test_conflicting_step_names():
  """
  There should only ever be one unique step name in the profile.
  """
  with tempfile.NamedTemporaryFile(delete=True) as temp:
    xspace = XSpace()
    plane = xspace.planes.add()
    plane.name = "/device:TPU:0"
    plane.event_metadata[0].name = "SyncTensorsGraph.1"
    plane.event_metadata[1].name = "SyncTensorsGraph.2"
    line = plane.lines.add()
    line.name = "XLA Modules"
    event = line.events.add()
    event.metadata_id = 0
    event.offset_ps = int(1e12)
    event.duration_ps = int(1e12)
    event = line.events.add()
    event.metadata_id = 1
    event.offset_ps = int(2e12)
    event.duration_ps = int(2e12)
    temp.write(xspace.SerializeToString())
    temp.flush()
    with pytest.raises(ValueError, match="Ambiguous"):
      analyze_step_duration(temp.name)


def test_real_profile():
  """
  Tests parsing a real profile generated by a simple CNN.
  """
  # Read real_profile.pb.gz relative to this test directory, and decompress it.
  script_dir = os.path.dirname(os.path.realpath(__file__))
  compressed_pb = os.path.join(script_dir, "real_profile.pb.gz")
  with gzip.open(compressed_pb, "rb") as f:
    xspace = XSpace()
    xspace.ParseFromString(f.read())
    assert pytest.approx(analyze_step_duration_from_pb(xspace), abs=1e-4) == 0.0206
