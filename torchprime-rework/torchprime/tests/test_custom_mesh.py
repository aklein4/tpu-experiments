import numpy as np

from torchprime.mesh.custom_mesh import maybe_get_custom_mesh


def test_64x4_custom_mesh_1pod():
  devices = maybe_get_custom_mesh(
    ici_mesh_shape=(64, 4),
    dcn_mesh_shape=(1, 1),
    num_devices=256,
    num_slices=1,
  )
  assert (devices == get_64x4_reference_device_ids_1pod()).all()


def test_64x4_custom_mesh_1pod_extra_dims():
  devices = maybe_get_custom_mesh(
    ici_mesh_shape=(1, 64, 4, 1, 1),
    dcn_mesh_shape=(1, 1, 1, 1, 1),
    num_devices=256,
    num_slices=1,
  )
  assert (devices == get_64x4_reference_device_ids_1pod()).all()


def test_64x4_custom_mesh_2pod():
  devices = maybe_get_custom_mesh(
    ici_mesh_shape=(64, 4),
    dcn_mesh_shape=(2, 1),
    num_devices=512,
    num_slices=2,
  )
  assert (devices == get_64x4_reference_device_ids_2pod()).all()


def test_64x4_custom_mesh_2pod_extra_dims():
  devices = maybe_get_custom_mesh(
    ici_mesh_shape=(1, 64, 4, 1, 1),
    dcn_mesh_shape=(1, 2, 1, 1, 1),
    num_devices=512,
    num_slices=2,
  )
  assert (devices == get_64x4_reference_device_ids_2pod()).all()


def get_64x4_reference_device_ids_1pod():
  """Expected device arrangement for a 1 pod 64x4 mesh."""
  return np.array(
    [
      [0, 1, 17, 16],
      [2, 3, 19, 18],
      [4, 5, 21, 20],
      [6, 7, 23, 22],
      [8, 9, 25, 24],
      [10, 11, 27, 26],
      [12, 13, 29, 28],
      [14, 15, 31, 30],
      [32, 33, 49, 48],
      [34, 35, 51, 50],
      [36, 37, 53, 52],
      [38, 39, 55, 54],
      [40, 41, 57, 56],
      [42, 43, 59, 58],
      [44, 45, 61, 60],
      [46, 47, 63, 62],
      [64, 65, 81, 80],
      [66, 67, 83, 82],
      [68, 69, 85, 84],
      [70, 71, 87, 86],
      [72, 73, 89, 88],
      [74, 75, 91, 90],
      [76, 77, 93, 92],
      [78, 79, 95, 94],
      [96, 97, 113, 112],
      [98, 99, 115, 114],
      [100, 101, 117, 116],
      [102, 103, 119, 118],
      [104, 105, 121, 120],
      [106, 107, 123, 122],
      [108, 109, 125, 124],
      [110, 111, 127, 126],
      [128, 129, 145, 144],
      [130, 131, 147, 146],
      [132, 133, 149, 148],
      [134, 135, 151, 150],
      [136, 137, 153, 152],
      [138, 139, 155, 154],
      [140, 141, 157, 156],
      [142, 143, 159, 158],
      [160, 161, 177, 176],
      [162, 163, 179, 178],
      [164, 165, 181, 180],
      [166, 167, 183, 182],
      [168, 169, 185, 184],
      [170, 171, 187, 186],
      [172, 173, 189, 188],
      [174, 175, 191, 190],
      [192, 193, 209, 208],
      [194, 195, 211, 210],
      [196, 197, 213, 212],
      [198, 199, 215, 214],
      [200, 201, 217, 216],
      [202, 203, 219, 218],
      [204, 205, 221, 220],
      [206, 207, 223, 222],
      [224, 225, 241, 240],
      [226, 227, 243, 242],
      [228, 229, 245, 244],
      [230, 231, 247, 246],
      [232, 233, 249, 248],
      [234, 235, 251, 250],
      [236, 237, 253, 252],
      [238, 239, 255, 254],
    ]
  ).flatten()


def get_64x4_reference_device_ids_2pod():
  """Expected device arrangement for a 2 pod 64x4 mesh."""
  return np.array(
    [
      [0, 1, 17, 16],
      [2, 3, 19, 18],
      [4, 5, 21, 20],
      [6, 7, 23, 22],
      [8, 9, 25, 24],
      [10, 11, 27, 26],
      [12, 13, 29, 28],
      [14, 15, 31, 30],
      [32, 33, 49, 48],
      [34, 35, 51, 50],
      [36, 37, 53, 52],
      [38, 39, 55, 54],
      [40, 41, 57, 56],
      [42, 43, 59, 58],
      [44, 45, 61, 60],
      [46, 47, 63, 62],
      [64, 65, 81, 80],
      [66, 67, 83, 82],
      [68, 69, 85, 84],
      [70, 71, 87, 86],
      [72, 73, 89, 88],
      [74, 75, 91, 90],
      [76, 77, 93, 92],
      [78, 79, 95, 94],
      [96, 97, 113, 112],
      [98, 99, 115, 114],
      [100, 101, 117, 116],
      [102, 103, 119, 118],
      [104, 105, 121, 120],
      [106, 107, 123, 122],
      [108, 109, 125, 124],
      [110, 111, 127, 126],
      [128, 129, 145, 144],
      [130, 131, 147, 146],
      [132, 133, 149, 148],
      [134, 135, 151, 150],
      [136, 137, 153, 152],
      [138, 139, 155, 154],
      [140, 141, 157, 156],
      [142, 143, 159, 158],
      [160, 161, 177, 176],
      [162, 163, 179, 178],
      [164, 165, 181, 180],
      [166, 167, 183, 182],
      [168, 169, 185, 184],
      [170, 171, 187, 186],
      [172, 173, 189, 188],
      [174, 175, 191, 190],
      [192, 193, 209, 208],
      [194, 195, 211, 210],
      [196, 197, 213, 212],
      [198, 199, 215, 214],
      [200, 201, 217, 216],
      [202, 203, 219, 218],
      [204, 205, 221, 220],
      [206, 207, 223, 222],
      [224, 225, 241, 240],
      [226, 227, 243, 242],
      [228, 229, 245, 244],
      [230, 231, 247, 246],
      [232, 233, 249, 248],
      [234, 235, 251, 250],
      [236, 237, 253, 252],
      [238, 239, 255, 254],
      [256, 257, 273, 272],
      [258, 259, 275, 274],
      [260, 261, 277, 276],
      [262, 263, 279, 278],
      [264, 265, 281, 280],
      [266, 267, 283, 282],
      [268, 269, 285, 284],
      [270, 271, 287, 286],
      [288, 289, 305, 304],
      [290, 291, 307, 306],
      [292, 293, 309, 308],
      [294, 295, 311, 310],
      [296, 297, 313, 312],
      [298, 299, 315, 314],
      [300, 301, 317, 316],
      [302, 303, 319, 318],
      [320, 321, 337, 336],
      [322, 323, 339, 338],
      [324, 325, 341, 340],
      [326, 327, 343, 342],
      [328, 329, 345, 344],
      [330, 331, 347, 346],
      [332, 333, 349, 348],
      [334, 335, 351, 350],
      [352, 353, 369, 368],
      [354, 355, 371, 370],
      [356, 357, 373, 372],
      [358, 359, 375, 374],
      [360, 361, 377, 376],
      [362, 363, 379, 378],
      [364, 365, 381, 380],
      [366, 367, 383, 382],
      [384, 385, 401, 400],
      [386, 387, 403, 402],
      [388, 389, 405, 404],
      [390, 391, 407, 406],
      [392, 393, 409, 408],
      [394, 395, 411, 410],
      [396, 397, 413, 412],
      [398, 399, 415, 414],
      [416, 417, 433, 432],
      [418, 419, 435, 434],
      [420, 421, 437, 436],
      [422, 423, 439, 438],
      [424, 425, 441, 440],
      [426, 427, 443, 442],
      [428, 429, 445, 444],
      [430, 431, 447, 446],
      [448, 449, 465, 464],
      [450, 451, 467, 466],
      [452, 453, 469, 468],
      [454, 455, 471, 470],
      [456, 457, 473, 472],
      [458, 459, 475, 474],
      [460, 461, 477, 476],
      [462, 463, 479, 478],
      [480, 481, 497, 496],
      [482, 483, 499, 498],
      [484, 485, 501, 500],
      [486, 487, 503, 502],
      [488, 489, 505, 504],
      [490, 491, 507, 506],
      [492, 493, 509, 508],
      [494, 495, 511, 510],
    ]
  ).flatten()
